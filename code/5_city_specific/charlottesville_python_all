from qgis.gui import QgsMapToolIdentify
from qgis.core import QgsVectorLayer, QgsPointXY, QgsRectangle
from qgis.utils import iface

# Get the active layer
layer = iface.activeLayer()
print("Active layer:", layer.name())

# Start editing
layer.startEditing()
print("Started editing")

# Get the hex_code field index
hex_idx = layer.fields().indexOf('hex_code')
print("Hex code field index:", hex_idx)

# Create identify tool
identify_tool = QgsMapToolIdentify(iface.mapCanvas())
print("Created identify tool")

# Get the map canvas
canvas = iface.mapCanvas()

# Get total number of features
total_features = layer.featureCount()
count = 0

# Counter for testing
test_count = 0

# Loop through features
for feature in layer.getFeatures():
    count += 1
    if count % 100 == 0:  # Print progress every 100 features
        print(f"Processing feature {count} of {total_features} ({(count/total_features*100):.1f}%)")
    
    if test_count >= 20:
        break
    
    try:
        # Get feature's centroid
        if not feature.hasGeometry():
            print(f"Feature {feature.id()} has no geometry")
            continue
            
        geom = feature.geometry()
        if geom.isNull():
            print(f"Feature {feature.id()} has null geometry")
            continue
            
        centroid = geom.centroid()
        if centroid is None or centroid.isNull():
            print(f"Feature {feature.id()} has invalid centroid")
            continue
            
        point = centroid.asPoint()
        if point is None:
            print(f"Feature {feature.id()} failed point conversion")
            continue
        
        # Convert geometry coordinates to map canvas coordinates
        canvas_point = canvas.getCoordinateTransform().transform(point)
        
        # Perform identify using transformed coordinates
        results = identify_tool.identify(canvas_point.x(), canvas_point.y(), [layer], QgsMapToolIdentify.TopDownAll)
        
        if len(results) > 0:
            # Process results
            for result in results:
                attrs = result.mDerivedAttributes
                if 'Embedded Symbol' in attrs:
                    embedded_symbol = attrs['Embedded Symbol']
                    if 'Fill (#' in embedded_symbol:
                        hex_code = embedded_symbol[embedded_symbol.find('#'):embedded_symbol.find(')')]
                        # Update the feature's hex_code field
                        layer.changeAttributeValue(feature.id(), hex_idx, hex_code)
    
    except Exception as e:
        print(f"Error processing feature {feature.id()}: {str(e)}")
        print(f"Geometry type: {feature.geometry().type() if feature.hasGeometry() else 'No geometry'}")
        continue

    test_count += 1

# Commit the changes
layer.commitChanges()

print("\nProcessing complete! All hex codes have been added to the attribute table.")